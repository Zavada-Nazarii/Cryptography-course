import hashlib
import os
import json
from zxcvbn import zxcvbn

PASSWORDS_FILE = "passwords.txt"
HASHED_OUTPUT_FILE = "hashed_passwords.json"
MAX_ZXCVBN_LENGTH = 72  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è zxcvbn

# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—ñ–≤ —É –¥–æ–≤–≥–æ–º—É –ø–∞—Ä–æ–ª—ñ
def calculate_entropy(password):
    unique_chars = len(set(password))  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    length_factor = len(password) // 10  # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞ –¥–æ–≤–∂–∏–Ω—É
    return unique_chars + length_factor  # –ß–∏–º –±—ñ–ª—å—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, —Ç–∏–º —Å–∫–ª–∞–¥–Ω—ñ—à–µ

# üîπ –§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ—Ç–µ—Ä–∞—Ü—ñ–π –¥–ª—è PBKDF2
def get_pbkdf2_params(password):
    if len(password) <= MAX_ZXCVBN_LENGTH:  # –Ø–∫—â–æ –ø–∞—Ä–æ–ª—å –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ zxcvbn
        score = zxcvbn(password)['score']
    else:  # –Ø–∫—â–æ –ø–∞—Ä–æ–ª—å –¥–æ–≤–≥–∏–π, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –≤—Ä—É—á–Ω—É
        entropy = calculate_entropy(password)
        if entropy < 15:
            score = 1  # –î—É–∂–µ —Å–ª–∞–±–∫–∏–π –ø–∞—Ä–æ–ª—å
        elif entropy < 25:
            score = 2  # –°–µ—Ä–µ–¥–Ω—ñ–π –ø–∞—Ä–æ–ª—å
        elif entropy < 35:
            score = 3  # –°–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å
        else:
            score = 4  # –î—É–∂–µ —Å–∫–ª–∞–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø–∞—Ä–æ–ª—é
    if score == 0 or score == 1:
        iterations = 500_000  # –î—É–∂–µ —Å–ª–∞–±–∫–∏–π –ø–∞—Ä–æ–ª—å ‚Üí –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    elif score == 2:
        iterations = 300_000  # –°–µ—Ä–µ–¥–Ω—ñ–π –ø–∞—Ä–æ–ª—å ‚Üí –≤–∏—Å–æ–∫–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    elif score == 3:
        iterations = 200_000  # –°–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å ‚Üí –ø–æ–º—ñ—Ä–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    else:
        iterations = 100_000  # –î—É–∂–µ —Å–∫–ª–∞–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å ‚Üí —à–≤–∏–¥–∫–µ —Ö–µ—à—É–≤–∞–Ω–Ω—è

    return iterations

# üîπ –§—É–Ω–∫—Ü—ñ—è —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é —á–µ—Ä–µ–∑ PBKDF2
def hash_password_pbkdf2(password):
    if len(password) > MAX_ZXCVBN_LENGTH:
        password = hashlib.sha512(password.encode()).hexdigest()  # –ü–æ–ø–µ—Ä–µ–¥–Ω—î —Ö–µ—à—É–≤–∞–Ω–Ω—è SHA-512

    iterations = get_pbkdf2_params(password)
    salt = os.urandom(16)  # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π salt
    hashed_pw = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, iterations)
    
    return {
        'iterations': iterations,
        'salt': salt.hex(),
        'hash': hashed_pw.hex()
    }

# üîπ –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É
def read_passwords_from_file(filename):
    try:
        with open(filename, "r", encoding="utf-8") as file:
            passwords = [line.strip() for line in file if line.strip()]
        return passwords
    except FileNotFoundError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return []

# üîπ –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ö–µ—à—É–≤–∞–Ω–Ω—è
passwords = read_passwords_from_file(PASSWORDS_FILE)
hashed_passwords = {pw: hash_password_pbkdf2(pw) for pw in passwords}

# üîπ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª JSON
with open(HASHED_OUTPUT_FILE, "w", encoding="utf-8") as file:
    json.dump(hashed_passwords, file, indent=4)

print(f"‚úÖ –ü–∞—Ä–æ–ª—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ö–µ—à–æ–≤–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —É {HASHED_OUTPUT_FILE}.")

