import hmac
import hashlib

# üîπ –§–∞–π–ª–∏
MAC_KEY_FILE = "mac_key.txt"
IV_FILE = "iv.txt"
CIPHERTEXT_FILE = "ciphertext.txt"
MAC_FILE = "mac.txt"

# üîπ –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó HMAC-SHA256
def generate_mac(mac_key, iv, ciphertext):
    return hmac.new(mac_key, iv + ciphertext, hashlib.sha256).hexdigest()

# üîπ –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ (—Ç–µ–ø–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–µ!)
def read_file(filename, binary=False):
    try:
        mode = "rb" if binary else "r"
        with open(filename, mode) as file:
            return file.read().strip()
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return None

# üîπ –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ MAC
def verify_mac():
    mac_key_hex = read_file(MAC_KEY_FILE)  # MAC-–∫–ª—é—á —É HEX
    iv = read_file(IV_FILE, binary=True)  # IV —É –±–∞–π—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    ciphertext = read_file(CIPHERTEXT_FILE, binary=True)  # –®–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç —É –±–∞–π—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    stored_mac = read_file(MAC_FILE)  # MAC —É HEX

    if not mac_key_hex or not iv or not ciphertext or not stored_mac:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤.")
        return

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ MAC-–∫–ª—é—á —ñ–∑ HEX —É –±–∞–π—Ç–∏
    mac_key = bytes.fromhex(mac_key_hex)

    # –û–±—á–∏—Å–ª—é—î–º–æ –Ω–æ–≤–∏–π MAC
    computed_mac = generate_mac(mac_key, iv, ciphertext)

    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ MAC-–∏
    if hmac.compare_digest(computed_mac, stored_mac):
        print("‚úÖ –î–∞–Ω—ñ –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω—ñ! –®–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –Ω–µ –∑–º—ñ–Ω—é–≤–∞–≤—Å—è.")
    else:
        print("‚ùå –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è! –î–∞–Ω—ñ –±—É–ª–∏ –∑–º—ñ–Ω–µ–Ω—ñ –∞–±–æ –ø—ñ–¥—Ä–æ–±–ª–µ–Ω—ñ.")

# üîπ –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    verify_mac()

