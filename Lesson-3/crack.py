import string
import time
import requests

def encrypt(pt_hex):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Oracle"""
    url = f"http://aes.cryptohack.org/ecb_oracle/encrypt/{pt_hex}/"
    
    r = requests.get(url)
    if r.status_code != 200:
        print(f"HTTP Error {r.status_code}: {r.text}")
        return None
    
    return r.json().get("ciphertext", "")

def print_blk(text, size=32):
    """–í–∏–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —É –≤–∏–≥–ª—è–¥—ñ –±–ª–æ–∫—ñ–≤"""
    parts = [text[i:i+size] for i in range(0, len(text), size)]
    print(" | ".join(parts))

def crack():
    flag = ''
    total = 32 - 1
    alphabet = '_@}{' + string.digits + string.ascii_lowercase + string.ascii_uppercase

    while True:
        payload = 'A' * (total - len(flag))
        expected = encrypt(payload.encode().hex())
        print(f"–ï—Ç–∞–ª–æ–Ω–Ω–∏–π {expected}")
        if expected is None:
            print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞, —Å–ø—Ä–æ–±—É—é —â–µ —Ä–∞–∑...")
            time.sleep(3)
            continue

        print('E', '', end='')
        print_blk(expected, 32)
        
        for c in alphabet: 
            res = encrypt((payload + flag + c).encode().hex())

            if res is None:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–∏–º–≤–æ–ª—É {c}, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...")
                time.sleep(3)
                continue

            print(c, '', end='')
            print_blk(res, 32)

            if res[32:64] == expected[32:64]:
                flag += c
                print(f"üîì –ü–æ—Ç–æ—á–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–∞–ø–æ—Ä–∞: {flag}")
                break
            
            time.sleep(0.5)  # –ó–º–µ–Ω—à—É—î–º–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä

        if flag.endswith('}'): 
            print(f"‚úÖ –ü—Ä–∞–ø–æ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ: {flag}")
            break

    return flag

crack()

